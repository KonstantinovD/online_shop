
                        ИСПОЛЬЗОВАНИЕ СЕССИЙ DJANGO

    Django предоставляет подсистему сессий, которая может работать как с
авторизованными, так и с анонимными пользователями. С ее помощью вы можете
привязать любую информацию к конкретному посетителю. Информация сессии
сохраняется в базе данных на стороне сервера и в куках на стороне браузера,
если вы используете сессии на их основе.

    Промежуточный слой сессий управляет обработкой и установкой куков для каждого
запроса. По умолчанию подсистема сессий сохраняет их в базу данных, но и это
поведение можно переопределить, если выбрать другой механизм хранения сессий.

    Чтобы начать работу с сессиями, необходимо добавить в настройку MIDDLEWARE
проекта строку 'django.contrib.sessions.middleware.SessionMiddleware'. Это
промежуточный слой для управления сессиями. Когда проект создается командой
startproject, этот слой уже добавлен в список MIDDLEWARE. Благодаря промежуточному
слою текущая сессия становится доступна в объекте запроса, request, и вы можете
обратиться к ней через запись request.session.

    Данные хранятся в виде словаря Python и могут быть представлены любым типом
объектов. Единственное ограничение – ключи и значения должны быть сериализуемыми
в JSON. Работа с сессиями в Django полностью аналогична работе с Python-словарями.

    !!!ВАЖНО!!!
    Когда пользователь авторизуется на сайте, его анонимная сессия теряется, и
создается новая, ассоциированная с конкретным пользователем. Если вы храните
в анонимной сессии данные, которые не должны быть утеряны после авторизации,
необходимо копировать их в новую сессию при входе пользователя.


                                НАСТРОЙКА СЕССИЙ

    Django поддерживает несколько настроек сессий для вашего проекта. Самая
значимая из них – SESSION_ENGINE. Она позволяет указать, каким образом хранить
данные сессии. По умолчанию они сохраняются в базу данных как объекты
модели Session приложения django.contrib.sessions.

    Существуют следующие способы хранения данных сессии:
+ на основе базы данных – информация сессии сохраняется в базе (этот способ
  используется по умолчанию);
+ на основе файлов – данные сохраняются в файловой системе;
+ на основе кеша – данные хранятся в бэкэнде кеширования. Вы можете настроить его
  с помощью конфигурации CACHES файла settings.py. Отметим, что сессии
  на основе кеша – самый быстрый способ;
+ на основе кеша и базы данных – информация сессий записывается в базу данных,
  но для доступа к ней обращение идет сначала в кеш, и только в том случае,
  если там этой информации уже нет, выполняется запрос в базу данных;
+ на основе куков – данные сессий сохраняются в куках, отправляемых
  в браузер пользователя.

    Для лучшей производительности используйте сессии на основе кеша. Django
поддерживает работу с Memcached и другими бэкэндами кеширования, такими как Redis.

    Кроме задания способа сохранения данных сессий, можно управлять ими и через такие настройки:
+ SESSION_COOKIE_AGE – время жизни сессии на основе куков в секундах.
  Значение по умолчанию – 1209600 (2 недели);
+ SESSION_COOKIE_DOMAIN – домен для сессий на основе куков. Установите эту
  настройку равной домену вашего сайта или None, чтобы избежать угрозы подмены куков;
+ SESSION_COOKIE_DOMAIN – булево значение, говорящее о том, может ли сессия
  на основе куков быть задана через HTTP- и HTTPS-соединения
  или только через HTTPS-;
+ SESSION_EXPIRE_AT_BROWSER_CLOSE – время жизни сессии на основе куков после
  закрытия браузера;
+ SESSION_SAVE_EVERY_REQUEST – булево значение. Если оно равно True, сессия
  будет сохраняться в базу данных при каждом запросе. При этом время
  окончания ее действия будет автоматически обновляться.

    Все доступные настройки подсистемы сессий вы можете найти на странице:
https://docs.djangoproject.com/en/2.0/ref/settings/#sessions.


                             ВРЕМЯ ЖИЗНИ СЕССИИ

    Вы можете задать время жизни сессии в браузере с помощью настройки
SESSION_EXPIRE_AT_BROWSER_CLOSE. По умолчанию она равна False. Сессия будет
храниться в течение времени, указанного в SESSION_COOKIE_AGE. Если вы установите
SESSION_EXPIRE_AT_BROWSER_CLOSE=True, сессия будет заканчиваться при закрытии
пользователем браузера. При этом Django не будет обращать внимания на время жизни,
заданное в SESSION_COOKIE_AGE.
    Кроме этого, можно изменить время жизни с помощью
    метода set_expiry() объекта сессии request.session.
